栈帧下标从0开始
 |
 v
[ ]{0: INCSP 1}               // int t;  没有使用的全局变量
[ 0 ]{2: LDARGS}              // main 命令行参数 i = 0    
[ 0 0 ]{3: CALL 1 7}          // 调用 位于7 的 main(0) 函数 参数个数为1
                              // 栈帧内容 [6 -999 0] 的解释
                              // CALL 1 7 拿掉栈上1个参数 0 
                              // 放上 返回地址: 6
                                      old bp: -999   默认初始bp值为 -999
                                       参数i : 0
[ 0 6 -999 0 ]{7: INCSP 1}    // 给 int  r; 留空间
[ 0 6 -999 0 0 ]{9: GETBP}    // bp = 3   
[ 0 6 -999 0 0 3 ]{10: CSTI 0}   bp + 0   main参数 i的位置
[ 0 6 -999 0 0 3 0 ]{12: ADD}
[ 0 6 -999 0 0 3 ]{13: LDI}   //  得到参数 i=0
[ 0 6 -999 0 0 0 ]{14: GETBP}
[ 0 6 -999 0 0 0 3 ]{15: CSTI 1}  bp+1  main局部变量r的位置 
[ 0 6 -999 0 0 0 3 1 ]{17: ADD}   bp+1   &r=4
[ 0 6 -999 0 0 0 4 ]{18: CALL 2 35}   //调用 位于 35 的fac(0,4)  4是r的在栈上的地址 &r
                                      // CALL 2 35 拿掉栈上的两个参数 0 4
[ 0 6 -999 0 0 21 3 0 4 ]{35: GETBP}
[ 0 6 -999 0 0 21 3 0 4 7 ]{36: CSTI 0}
[ 0 6 -999 0 0 21 3 0 4 7 0 ]{38: ADD}
[ 0 6 -999 0 0 21 3 0 4 7 ]{39: LDI}   // 得到 fac 参数n的值 =0
[ 0 6 -999 0 0 21 3 0 4 0 ]{40: CSTI 0}   
[ 0 6 -999 0 0 21 3 0 4 0 0 ]{42: EQ}     //  n = 0 ?
[ 0 6 -999 0 0 21 3 0 4 1 ]{43: IFZERO 57}  // n != 0  else 转到 57 条件为FALSE 则跳转
[ 0 6 -999 0 0 21 3 0 4 ]{45: GETBP}         // n=0 执行
[ 0 6 -999 0 0 21 3 0 4 7 ]{46: CSTI 1}
[ 0 6 -999 0 0 21 3 0 4 7 1 ]{48: ADD}  
[ 0 6 -999 0 0 21 3 0 4 8 ]{49: LDI}    // *res的左值 = 4  
[ 0 6 -999 0 0 21 3 0 4 4 ]{50: CSTI 1}
[ 0 6 -999 0 0 21 3 0 4 4 1 ]{52: STI}  // *res = 1  注意: STI对栈上位置4 赋值 1
[ 0 6 -999 0 1 21 3 0 4 1 ]{53: INCSP -1}
            ^^^
[ 0 6 -999 0 1 21 3 0 4 ]{55: GOTO 97}
[ 0 6 -999 0 1 21 3 0 4 ]{97: INCSP 0}  //fac 没有局部变量
[ 0 6 -999 0 1 21 3 0 4 ]{99: RET 1}    //从 fac(0,4)返回 撤销栈帧  return; RET m-1                                         //                    fac参数个数 m=2
[ 0 6 -999 0 1 4 ]{21: INCSP -1}       //  fac(0); 丢弃 fac(0);的值 
[ 0 6 -999 0 1 ]{23: GETBP}             
[ 0 6 -999 0 1 3 ]{24: CSTI 1}
[ 0 6 -999 0 1 3 1 ]{26: ADD}          //得到r的偏移地址  
[ 0 6 -999 0 1 4 ]{27: LDI}           // 得到main 的值 r
[ 0 6 -999 0 1 1 ]{28: PRINTI}       //输出 r
1 [ 0 6 -999 0 1 1 ]{29: INCSP -1}   // 丢弃 PRINTI 的值 (r值) 
[ 0 6 -999 0 1 ]{31: INCSP -1}  // 丢弃 main 的局部变量 r
[ 0 6 -999 0 ]{33: RET 0}          //  从main(0) 中 return; RET m-1
                                             // main 参数个数 m=1 
[ 0 0 ]{6: STOP}             // 执行结束                  
